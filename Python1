{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6977d6dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the string:Vanshika\n",
      "{'V': 1, 'a': 2, 'n': 1, 's': 1, 'h': 1, 'i': 1, 'k': 1}\n"
     ]
    }
   ],
   "source": [
    "# take a input from the user  and count all the characters and put it into the dictionary\n",
    "x=input(\"Enter the string:\")\n",
    "y={}\n",
    "for var in x:\n",
    "    if var in y:\n",
    "        y[var]=y[var]+1\n",
    "    else:\n",
    "        y[var]=1\n",
    "print(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bc774435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter input:Vansh!k@\n",
      "Capital letter found: 1\n",
      "Small letter found: 5\n",
      "Number found: 0\n",
      "@ is found: 1\n",
      "! is found: 1\n",
      "# is found: 0\n"
     ]
    }
   ],
   "source": [
    "\"\"\"Take input from user check minimum one capital leter betwwen(A-Z)& \n",
    "small letter b/w c-z & number b/w 0-9 & special \n",
    "characters { @,!,#}  [note: don't use inbuild functions ] \"\"\"\n",
    "\n",
    "n=input(\"Enter input:\")\n",
    "C=0\n",
    "s=0\n",
    "num=0\n",
    "sp1=0\n",
    "sp2=0\n",
    "sp3=0\n",
    "for i in n:\n",
    "    if(65<=ord(i)<=90):\n",
    "        C=C+1\n",
    "    elif(97<=ord(i)<=122):\n",
    "        s=s+1\n",
    "    elif(48<=ord(i)<=57):\n",
    "        num=num+1\n",
    "    elif(ord(i)==64):\n",
    "        sp1=sp1+1\n",
    "    elif(ord(i)==33):\n",
    "        sp2=sp2+1\n",
    "    elif(ord(i)==35):\n",
    "        sp3=sp3+1\n",
    "\n",
    "print(\"Capital letter found:\",C)\n",
    "print(\"Small letter found:\",s)\n",
    "print(\"Number found:\",num)\n",
    "print(\"@ is found:\",sp1)\n",
    "print(\"! is found:\",sp2)\n",
    "print(\"# is found:\",sp3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "03edb2d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter input: 4\n",
      "      *  \n",
      "    * * *  \n",
      "  * * * * *  \n",
      "* * * * * * *  \n"
     ]
    }
   ],
   "source": [
    "\"\"\" print pyramid   \n",
    "      * \n",
    "    * * * \n",
    "  * * * * * \n",
    "* * * * * * *  \"\"\"\n",
    "\n",
    "n=int(input(\"Enter input: \"))\n",
    "for i in range(1,n+1):\n",
    "    for j in range(1,n+1-i):\n",
    "        print(\" \",end=\" \")\n",
    "    for k in range(1,(i*2)):\n",
    "        print(\"*\",end=\" \")\n",
    "    print(\" \")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
